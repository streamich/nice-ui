{"version":3,"file":"main.d4886cc044a88be88155.bundle.js","sources":["webpack:///./src/atoms/Ripple/index.tsx"],"sourcesContent":["import {Component, Children, cloneElement} from 'react';\nimport {sheet} from '../../css';\nimport {noop, h} from '../../util';\n\nconst styles = sheet(\n  {\n    ripple: {\n      bdrad: '50%',\n      h: '100px',\n      w: '100px',\n      pos: 'absolute',\n      transform: 'scale(0)',\n      op: 1,\n      pointerEvents: 'none',\n      '@keyframes decor-ripple': {\n        '100%': {\n          transform: 'scale(12)',\n          op: 0,\n        },\n      },\n    },\n  },\n  'util_Ripple',\n);\n\nexport interface IRippleProps {\n  color?: string;\n  disabled?: boolean;\n  ms?: number;\n}\n\nexport interface IRippleState {}\n\nexport class Ripple extends Component<IRippleProps, IRippleState> {\n  static defaultProps = {\n    color: 'rgba(0,0,0,.2)',\n    ms: 400,\n  };\n\n  el: HTMLElement = null;\n  elRipple: HTMLDivElement = null;\n\n  ref = (originalRef) => (el) => {\n    this.el = el;\n    (originalRef || noop)(el);\n  };\n\n  refRipple = (el) => {\n    this.elRipple = el;\n  };\n\n  onMouseDown = (originalMouseDown) => (event) => {\n    if (!this.elRipple) {\n      return;\n    }\n\n    const {left, top} = this.el.getBoundingClientRect();\n    const posX = left + window.scrollX;\n    const posY = top + window.scrollY;\n    const elX = event.pageX - posX;\n    const elY = event.pageY - posY;\n    const style = this.elRipple.style;\n\n    style.removeProperty('animation');\n    style.top = elY - 50 + 'px';\n    style.left = elX - 50 + 'px';\n    setTimeout(() => {\n      style.setProperty('animation', `decor-ripple ${this.props.ms}ms linear`);\n    }, 35);\n\n    (originalMouseDown || noop)(event);\n  };\n\n  render() {\n    const {children, color} = this.props;\n    const element = Children.only(children) as React.ReactElement;\n    const ripple = h('div', {\n      className: styles.ripple,\n      style: {\n        background: color,\n      },\n      ref: this.refRipple,\n    });\n\n    let style = element.props.style || {};\n\n    style = Object.assign({}, style, {\n      overflow: 'hidden',\n      position: 'relative',\n    });\n\n    const innerChildren = Children.toArray(element.props.children);\n\n    innerChildren.push(ripple);\n\n    return cloneElement(\n      element,\n      {\n        ...element.props,\n        style,\n        ref: this.ref(element.props.ref),\n        onMouseDown: this.onMouseDown(element.props.onMouseDown),\n      },\n      ...innerChildren,\n    ) as JSX.Element;\n  }\n}\n"],"mappings":"AAAA","sourceRoot":""}