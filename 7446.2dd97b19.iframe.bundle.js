"use strict";(self.webpackChunknice_ui=self.webpackChunknice_ui||[]).push([[7446],{"./node_modules/raw-loader/dist/cjs.js!./src/docs/content/guidelines/theming/text.md":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{default:()=>__WEBPACK_DEFAULT_EXPORT__});const __WEBPACK_DEFAULT_EXPORT__="Nice UI uses `nano-theme` library for CSS and theming, which is a performant lean\nconfiguration of `nano-css` library.\n\n\n## Using `nano-theme`\n\nInstall compatible version of `nano-theme` library.\n\n```bash\nnpm install nano-theme\n```\n\n\n### Theming\n\n`nano-theme` comes with two themes, `light` and `dark`. You can use these\nthemes to style your components. The default (light) theme can be statically\nimported from `nano-theme`.\n\n```jsx\nimport {theme} from 'nano-theme';\n```\n\nTo style your components with the correct theme use the `useTheme` hook.\n\n```tsx\nimport {useTheme} from 'nano-theme';\n\nconst MyComponent = ({children}) => {\n  const theme = useTheme();\n\n  return (\n    <div style={{color: theme.g(0)}}>\n      {children}\n    </div>\n  );\n};\n```\n\n\n### Creating CSS rules\n\nEmit global CSS declarations\n\n```jsx\nimport {put} from 'nano-theme';\n\nput('.my-class', {\n  color: 'red',\n  fontSize: '16px',\n});\n```\n\nGenerate CSS class names automatically out of CSS rules.\n\n```jsx\nimport {rule} from 'nano-theme';\n\nconst className = rule({\n  color: 'red',\n  fontSize: '16px',\n});\n```\n\nCreate dynamic CSS rules, which change based on props or state.\n\n```jsx\nimport {drule, useTheme} from 'nano-theme';\n\nconst createClassName = drule({\n  fontSize: '16px',\n});\n\nconst MyComponent = ({children}) => {\n  const theme = useTheme();\n  const className = createClassName({\n    color: theme.g(0),\n  });\n\n  return (\n    <div className={className}>\n      {children}\n    </div>\n  );\n};\n```\n"}}]);